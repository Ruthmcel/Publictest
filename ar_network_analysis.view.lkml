view: ar_network_analysis {
  derived_table: {
    sql: WITH
        NHIN_TYPE
      AS (SELECT
          NHIN_TYPE_ID,
          NHIN_TYPE_ABBREVIATION,
          NHIN_CATEGORY_ID,
          SOURCE_SYSTEM_ID
          FROM EDW.D_NHIN_TYPE
         ),
    TMP_AR_TRANS AS
    (Select TS.*,CCR.CONTRACT_RATE_CARRIER_ID,CCR.THIRD_PARTY_CONTRACT_ID,ST.STORE_NUMBER AS STORE_ID,
    CP.CARRIER_CODE, CP.PLAN_CODE, CP.PLAN_NAME,TPC.THIRD_PARTY_CONTRACT_NAME,TRANSACTION_INFO_GROUP_CODE,
    CONTRACT_RATE_STATE_TYPE_ID, CRST.NHIN_TYPE_ABBREVIATION AS CONTRACT_RATE_STATE_ID,  CONTACT_INFO_STATE, CONTRACT_RATE_COST_BASE,
    CONTRACT_RATE_SERVICE_FEE, NT.NHIN_TYPE_ABBREVIATION,CR.CONTRACT_RATE_ID,
    CONTRACT_RATE_NETWORK_NAME,CONTRACT_RATE_START_DAYS_SUPPLY,CONTRACT_RATE_END_DAYS_SUPPLY,
    CONTRACT_RATE_UNDERPAY_THRESHOLD, (TRANSACTION_INFO_ACQUISITION_COST/100) AS TRANSACTION_INFO_ACQUISITION_COST,TRANSACTION_INFO_DAYS_SUPPLY,
    (TRANSACTION_INFO_DRUG_AWP/100) AS TRANSACTION_INFO_DRUG_AWP,TRANSACTION_INFO_BIN_NUMBER,TRANSACTION_INFO_PCN_NUMBER,
    TRANSACTION_INFO_TX_DECIMAL_QUANTITY AS DISPENSED_QUANTITY,TRANSACTION_INFO_DAW,(TRANSACTION_INFO_UC_PRICE/100) AS TRANSACTION_INFO_UC_PRICE,
    TRANSACTION_INFO_DRUG_NAME,TRANSACTION_INFO_DRUG_NDC,TRANSACTION_INFO_GENERIC_CODE,
    (TRANSACTION_INFO_COST/100) AS TRANSACTION_INFO_COST,(TRANSACTION_INFO_RX_PRICE/100) AS TRANSACTION_INFO_RX_PRICE,(TRANSACTION_INFO_COPAY_AMOUNT/100) AS TRANSACTION_INFO_COPAY_AMOUNT,
    (TRANSACTION_INFO_TAX_AMOUNT/100) AS TRANSACTION_INFO_TAX_AMOUNT,TRANSACTION_INFO_TX_DECIMAL_QUANTITY,TRANSACTION_INFO_NETWORK_REIMBURSEMENT_ID,
    TRANSACTION_INFO_BASIS_OF_REIMBURSEMENT,TRANSACTION_INFO_TP_REFERENCE_NUMBER,
    DRUG_MULTI_SOURCE,GPI,DRUG_GCN,STORE_NCPDP_NUMBER,STORE_NPI_NUMBER,
    TRANSACTION_NOTE,TRANSACTION_NOTE_CATEGORY_TYPE,TRANSACTION_NOTE_PROGRESS_STATUS_TYPE
    ,(TRANSACTION_INFO_DISPENSING_FEE_PAID/100) TRANSACTION_INFO_DISPENSING_FEE_PAID,
    (TRANSACTION_INFO_INGREDIENT_COST_PAID/100) TRANSACTION_INFO_INGREDIENT_COST_PAID
    FROM (
    Select TS.CHAIN_ID,TRANSACTION_ID, TRANSACTION_STATUS_PLAN_ID, TRANSACTION_STATUS_NHIN_STORE_ID, TRANSACTION_STATUS_SOLD_DATE,
    (TRANSACTION_STATUS_TOTAL_PAID_AMOUNT/100) AS TRANSACTION_STATUS_TOTAL_PAID_AMOUNT, TRANSACTION_STATUS_RX_NUMBER, TRANSACTION_STATUS_TX_NUMBER, TRANSACTION_STATUS_FILL_DATE,
    TRANSACTION_STATUS_TRANSACTION_TYPE_ID, TRXN_TYPE.NHIN_TYPE_ABBREVIATION AS TRANSACTION_TYPE_ABBREVIATION, (TRANSACTION_STATUS_SUBMIT_AMOUNT/100) AS TRANSACTION_STATUS_SUBMIT_AMOUNT, TRANSACTION_STATUS_PROCESSOR_ID,
    TRANSACTION_STATUS_SPLIT_BILL_OPT_TYPE_ID, SPLT.NHIN_TYPE_ABBREVIATION AS SPLIT_BILL_ABBREVIATION
    --,CONTRACT_RATE_CARRIER_ID, THIRD_PARTY_CONTRACT_ID,STORE_NUMBER
    from EDW.F_TRANSACTION_STATUS TS
    INNER JOIN EDW.D_STORE AR_STORE ON TS.CHAIN_ID = AR_STORE.CHAIN_ID and TS.TRANSACTION_STATUS_NHIN_STORE_ID = AR_STORE.NHIN_STORE_ID AND AR_STORE.SOURCE_SYSTEM_ID = 8
    LEFT JOIN NHIN_TYPE SPLT ON TS.TRANSACTION_STATUS_SPLIT_BILL_OPT_TYPE_ID = SPLT.NHIN_TYPE_ID
    AND SPLT.NHIN_CATEGORY_ID = 15 AND SPLT.SOURCE_SYSTEM_ID = 8
    LEFT JOIN NHIN_TYPE TRXN_TYPE ON TS.TRANSACTION_STATUS_TRANSACTION_TYPE_ID = TRXN_TYPE.NHIN_TYPE_ID AND TRXN_TYPE.SOURCE_SYSTEM_ID = 8
    where TRANSACTION_STATUS_DELETED = 'N'
      and {% condition ar_chain.chain_id %} TS.chain_id {% endcondition %}
      and {% condition store_filter %} AR_STORE.STORE_NUMBER {% endcondition %}
      and {% condition fill_date_filter %} transaction_status_fill_date {% endcondition %}
      and  (
            (
              {% condition exclude_zero_dollar_claim_filter %} 'YES' {% endcondition %}
              and
              (
                TRANSACTION_STATUS_SUBMIT_AMOUNT <> 0 -- Excludes $0 Claims
                and (TRANSACTION_STATUS_TRANSACTION_LOCATION in (5900, 5903)
                  and NVL(ts.TRANSACTION_STATUS_ID, 0) < 6 )
              )
            )
            or
            (
              {% condition exclude_zero_dollar_claim_filter %} 'NO' {% endcondition %}
              and
              (
               (TRANSACTION_STATUS_TRANSACTION_LOCATION in (5900, 5903)
                  and NVL(ts.TRANSACTION_STATUS_ID, 0) < 6 ) OR (TRANSACTION_STATUS_TRANSACTION_LOCATION = 5901
                  and TRANSACTION_STATUS_SUBMIT_AMOUNT = 0 )
              )
            )
          )
      and (
            (
              {% condition include_split_bill_filter %} 'YES' {% endcondition %}
              and
              (
                --[ERXLPS-1998] replace D_NHIN_TYPE table with CTE NHIN_TYPE
                --TRANSACTION_STATUS_SPLIT_BILL_OPT_TYPE_ID in (SELECT NHIN_TYPE_ID FROM EDW.D_NHIN_TYPE WHERE NHIN_CATEGORY_ID = 15 and NHIN_TYPE_ID != 1500 )
                  TRANSACTION_STATUS_SPLIT_BILL_OPT_TYPE_ID in (SELECT NHIN_TYPE_ID FROM NHIN_TYPE WHERE NHIN_CATEGORY_ID = 15 and NHIN_TYPE_ID != 1500 )

              )
            )
            or
            (
              {% condition include_split_bill_filter %} 'NO' {% endcondition %}
              and
              (
                TRANSACTION_STATUS_SPLIT_BILL_OPT_TYPE_ID in (196, 197)
              )
            )
          )
      ) TS
      LEFT OUTER JOIN EDW.F_CLAIM_TO_CONTRACT_RATE CCR ON  TS.TRANSACTION_ID = CCR.TRANSACTION_ID AND TS.CHAIN_ID = CCR.CHAIN_ID
      LEFT OUTER JOIN EDW.D_STORE ST
            ON TS.CHAIN_ID = ST.CHAIN_ID AND TS.TRANSACTION_STATUS_NHIN_STORE_ID = ST.NHIN_STORE_ID and ST.SOURCE_SYSTEM_ID = 8 and UPPER(ST.STORE_AR_ACTIVITY_FLAG) = 'Y'
      LEFT OUTER JOIN EDW.F_TRANSACTION_INFO TI
            ON TS.CHAIN_ID = TI.CHAIN_ID AND TS.TRANSACTION_ID = TI.TRANSACTION_ID AND TRANSACTION_INFO_DELETED = 'N'
      LEFT OUTER JOIN EDW.D_CONTRACT_RATE CR
            ON CCR.CHAIN_ID = CR.CHAIN_ID AND CCR.CONTRACT_RATE_ID = CR.CONTRACT_RATE_ID
      LEFT JOIN NHIN_TYPE CRST ON CR.CONTRACT_RATE_STATE_TYPE_ID = CRST.NHIN_TYPE_ID
      AND CRST.NHIN_CATEGORY_ID = 131 AND CRST.SOURCE_SYSTEM_ID = 8
      LEFT OUTER JOIN EDW.D_THIRD_PARTY_CONTRACT TPC
            ON CCR.CHAIN_ID = TPC.CHAIN_ID AND CCR.THIRD_PARTY_CONTRACT_ID = TPC.THIRD_PARTY_CONTRACT_ID
      LEFT OUTER JOIN EDW.D_DRUG ND
            ON TI.TRANSACTION_INFO_DRUG_NDC = ND.NDC and ND.CHAIN_ID = 3000 and ND.SOURCE_SYSTEM_ID = 6 --NHIN DRUG
      LEFT OUTER JOIN
      (select plan_carrier_plan_id,carrier_code,plan_name,plan_code,plan_type_id from
              (select
                  plan_carrier_plan_id,carrier_code,plan_name,plan_code,plan_type_id,
                  row_number() over (partition by chain_id,plan_carrier_plan_id order by plan_lcr_id desc) rnk
                  from edw.d_plan
                  where chain_id = 3000 and source_system_id = 8 -- Absolute AR
              ) cp_rnk
             where cp_rnk.rnk = 1
            ) CP
            on TS.TRANSACTION_STATUS_PLAN_ID = CP.PLAN_CARRIER_PLAN_ID

      LEFT OUTER JOIN
      (
        Select CHAIN_ID,TRANSACTION_ID,TRANSACTION_NOTE,TNC.NHIN_TYPE_ABBREVIATION AS TRANSACTION_NOTE_CATEGORY_TYPE,TNP.NHIN_TYPE_ABBREVIATION AS TRANSACTION_NOTE_PROGRESS_STATUS_TYPE, ROW_NUMBER() OVER(PARTITION BY TRANSACTION_ID ORDER BY TRANSACTION_NOTE_SEQUENCE_NUMBER DESC ) TN_ROWNUM from
        EDW.F_TRANSACTION_NOTE TN
        LEFT OUTER JOIN NHIN_TYPE TNC
            ON TN.TRANSACTION_NOTE_CATEGORY_TYPE_ID = TNC.NHIN_TYPE_ID AND TNC.NHIN_CATEGORY_ID = 130 AND TNC.SOURCE_SYSTEM_ID = 8
      LEFT OUTER JOIN NHIN_TYPE TNP
            ON TN.TRANSACTION_NOTE_PROGRESS_STATUS_TYPE_ID = TNC.NHIN_TYPE_ID AND TNC.NHIN_CATEGORY_ID = 129 AND TNC.SOURCE_SYSTEM_ID = 8

        where {% condition ar_chain.chain_id %} chain_id {% endcondition %}
        --[ERXLPS-1998] commented column nhin_store_id not exist in F_TRANSACTION_NOTE table
      --and {% condition store_filter %} transaction_status_nhin_store_id {% endcondition %}
      ) TN
            ON TS.TRANSACTION_ID = TN.TRANSACTION_ID AND TS.CHAIN_ID = TN.CHAIN_ID AND TN_ROWNUM = 1
      LEFT OUTER JOIN EDW.D_CONTACT_INFORMATION CI
            ON TS.TRANSACTION_STATUS_NHIN_STORE_ID = CI.CONTACT_INFO_ID and ST.SOURCE_SYSTEM_ID = 8
      LEFT OUTER JOIN NHIN_TYPE NT
            ON CR.CONTRACT_RATE_BRAND_OR_GENERIC_TYPE_ID = NT.NHIN_TYPE_ID AND NT.NHIN_CATEGORY_ID = 125 AND NT.SOURCE_SYSTEM_ID = 8
      WHERE {% condition carrier_filter %} CCR.CLAIM_TO_CONTRACT_RATE_CARRIER_CODE {% endcondition %}
        AND {% condition plan_filter %} CCR.CLAIM_TO_CONTRACT_RATE_PLAN_CODE {% endcondition %}
        AND {% condition group_filter %} CCR.CLAIM_TO_CONTRACT_RATE_GROUP_CODE {% endcondition %}
        AND {% condition master_contract_filter %} TPC.THIRD_PARTY_CONTRACT_NAME {% endcondition %}
        AND {% condition rate_network_name_filter %} CRST.NHIN_TYPE_ABBREVIATION {% endcondition %}
        ),
      TMP_CONTRACT_RATE_PRICING AS
      (
        SELECT TRAN.CONTRACT_RATE_ID, TRAN.TRANSACTION_ID,TRAN.CHAIN_ID,CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID,NT.NHIN_TYPE_ABBREVIATION,
        TRANSACTION_STATUS_FILL_DATE,TRANSACTION_INFO_DRUG_NDC,GPI,DRUG_GCN
        FROM TMP_AR_TRANS TRAN
        JOIN EDW.D_CONTRACT_RATE_PRICING CRP
        ON TRAN.CHAIN_ID = CRP.CHAIN_ID AND TRAN.CONTRACT_RATE_ID = CRP.CONTRACT_RATE_ID
        LEFT JOIN NHIN_TYPE NT
        ON CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID = NT.NHIN_TYPE_ID AND NT.SOURCE_SYSTEM_ID = 8 AND NHIN_CATEGORY_ID = 122
        WHERE CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID = 12210
        AND CONTRACT_RATE_PRICING_TYPE_ID = 16702
      ),
      TMP_FEE_SCHEDULE_LIST_1 AS
      (
        SELECT CONTRACT_RATE_ID,TRANSACTION_ID,CRP.CHAIN_ID,ACTUALRX_FEE_SCHEDULE_DRUG_DESCRIPTOR_QUALIFIER_ID,
        CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID,NT.NHIN_TYPE_ABBREVIATION,ACTUALRX_FEE_SCHEDULE_DETAIL_UNIT_PRICE,
        ACTUALRX_FEE_SCHEDULE_ID,ACTUALRX_FEE_SCHEDULE_NAME,
        ACTUALRX_FEE_SCHEDULE_DETAIL_EFFECTIVE_START_DATE
        FROM TMP_CONTRACT_RATE_PRICING CRP
        JOIN EDW.D_ACTUALRX_FEE_SCHEDULE_DETAIL AFSD
        ON CRP.TRANSACTION_INFO_DRUG_NDC = ACTUALRX_FEE_SCHEDULE_DETAIL_DRUG_DESCRIPTOR
        JOIN EDW.D_ACTUALRX_FEE_SCHEDULE AFS
        ON AFSD.ACTUALRX_FEE_SCHEDULE_DETAIL_ID = AFS.ACTUALRX_FEE_SCHEDULE_ID
        LEFT JOIN NHIN_TYPE NT
        ON CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID = NT.NHIN_TYPE_ID AND NT.SOURCE_SYSTEM_ID = 8 AND NHIN_CATEGORY_ID = 122
        WHERE ACTUALRX_FEE_SCHEDULE_DRUG_DESCRIPTOR_QUALIFIER_ID = 15101
        AND TRANSACTION_STATUS_FILL_DATE >= ACTUALRX_FEE_SCHEDULE_DETAIL_EFFECTIVE_START_DATE
        AND TRANSACTION_STATUS_FILL_DATE <= ACTUALRX_FEE_SCHEDULE_DETAIL_EFFECTIVE_END_DATE
      ),
      TMP_FEE_SCHEDULE_LIST_2 AS
      (
        SELECT CONTRACT_RATE_ID,TRANSACTION_ID,CRP.CHAIN_ID,ACTUALRX_FEE_SCHEDULE_DRUG_DESCRIPTOR_QUALIFIER_ID,
        CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID,NT.NHIN_TYPE_ABBREVIATION,ACTUALRX_FEE_SCHEDULE_DETAIL_UNIT_PRICE,
        ACTUALRX_FEE_SCHEDULE_ID,ACTUALRX_FEE_SCHEDULE_NAME,
        ACTUALRX_FEE_SCHEDULE_DETAIL_EFFECTIVE_START_DATE
        FROM TMP_CONTRACT_RATE_PRICING CRP
        JOIN EDW.D_ACTUALRX_FEE_SCHEDULE_DETAIL AFSD
        ON CRP.GPI = ACTUALRX_FEE_SCHEDULE_DETAIL_DRUG_DESCRIPTOR
        JOIN EDW.D_ACTUALRX_FEE_SCHEDULE AFS
        ON AFSD.ACTUALRX_FEE_SCHEDULE_DETAIL_ID = AFS.ACTUALRX_FEE_SCHEDULE_ID
        LEFT JOIN NHIN_TYPE NT
        ON CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID = NT.NHIN_TYPE_ID AND NT.SOURCE_SYSTEM_ID = 8 AND NHIN_CATEGORY_ID = 122
        WHERE ACTUALRX_FEE_SCHEDULE_DRUG_DESCRIPTOR_QUALIFIER_ID = 15102
        AND TRANSACTION_STATUS_FILL_DATE >= ACTUALRX_FEE_SCHEDULE_DETAIL_EFFECTIVE_START_DATE
        AND TRANSACTION_STATUS_FILL_DATE <= ACTUALRX_FEE_SCHEDULE_DETAIL_EFFECTIVE_END_DATE
      ),
      TMP_FEE_SCHEDULE_LIST_3 AS
      (
        SELECT CONTRACT_RATE_ID,TRANSACTION_ID,CRP.CHAIN_ID,ACTUALRX_FEE_SCHEDULE_DRUG_DESCRIPTOR_QUALIFIER_ID,
        CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID,NT.NHIN_TYPE_ABBREVIATION,ACTUALRX_FEE_SCHEDULE_DETAIL_UNIT_PRICE,
        ACTUALRX_FEE_SCHEDULE_ID,ACTUALRX_FEE_SCHEDULE_NAME,
        ACTUALRX_FEE_SCHEDULE_DETAIL_EFFECTIVE_START_DATE
        FROM TMP_CONTRACT_RATE_PRICING CRP
        JOIN EDW.D_ACTUALRX_FEE_SCHEDULE_DETAIL AFSD
        ON CRP.DRUG_GCN = ACTUALRX_FEE_SCHEDULE_DETAIL_DRUG_DESCRIPTOR
        JOIN EDW.D_ACTUALRX_FEE_SCHEDULE AFS
        ON AFSD.ACTUALRX_FEE_SCHEDULE_DETAIL_ID = AFS.ACTUALRX_FEE_SCHEDULE_ID
        LEFT JOIN NHIN_TYPE NT
        ON CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID = NT.NHIN_TYPE_ID AND NT.SOURCE_SYSTEM_ID = 8 AND NHIN_CATEGORY_ID = 122
        WHERE ACTUALRX_FEE_SCHEDULE_DRUG_DESCRIPTOR_QUALIFIER_ID = 15103
        AND TRANSACTION_STATUS_FILL_DATE >= ACTUALRX_FEE_SCHEDULE_DETAIL_EFFECTIVE_START_DATE
        AND TRANSACTION_STATUS_FILL_DATE <= ACTUALRX_FEE_SCHEDULE_DETAIL_EFFECTIVE_END_DATE
      ),

      TMP_FEE_SCHEDULE_LIST AS
      (
        SELECT *,
        ROW_NUMBER() OVER (PARTITION BY CHAIN_ID,TRANSACTION_ID,CONTRACT_RATE_ID ORDER BY ACTUALRX_FEE_SCHEDULE_DRUG_DESCRIPTOR_QUALIFIER_ID ASC) TMP_FEE_SCHEDULE_ROWNUM
        From (
        SELECT *
        FROM TMP_FEE_SCHEDULE_LIST_1
        UNION ALL
        SELECT *
        FROM TMP_FEE_SCHEDULE_LIST_2
        UNION ALL
        SELECT *
        FROM TMP_FEE_SCHEDULE_LIST_3) TMP
      ),
      TMP_PRICE_LIST AS
      (
        SELECT  TRAN.CONTRACT_RATE_ID,TRAN.TRANSACTION_ID,TRAN.CHAIN_ID,CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID,NT.NHIN_TYPE_ABBREVIATION,
        DCH.UNIT_PRICE AS UNIT_PRICE,DCH.EFFECTIVE_START_DATE,NULL AS ACTUALRX_FEE_SCHEDULE_ID,
        NULL AS ACTUALRX_FEE_SCHEDULE_NAME
        FROM TMP_AR_TRANS TRAN
        JOIN EDW.D_CONTRACT_RATE_PRICING CRP ON TRAN.CHAIN_ID = CRP.CHAIN_ID AND TRAN.CONTRACT_RATE_ID = CRP.CONTRACT_RATE_ID
        JOIN
        (
                    select
                    ndc as drug_ndc,
                    drug_cost_gpi as gpi,
                    drug_cost_effective_start_date as effective_start_date,
                    drug_cost_effective_end_date as effective_end_date,
                    drug_cost_unit_amount/100 as unit_price,
                    drug_cost_type,
                    row_number() over (partition by ndc,drug_cost_type,drug_cost_effective_start_date order by source_timestamp desc) as rnk
                    from edw.d_drug_cost_hist
                    where chain_id = 3000
                    and source_system_id = 8 -- Absolute AR
                    --and drug_cost_type IN ('WAC MS')
        ) DCH ON DCH.DRUG_NDC = TRAN.TRANSACTION_INFO_DRUG_NDC AND RNK = 1
        LEFT JOIN NHIN_TYPE NT
        ON CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID = NT.NHIN_TYPE_ID AND NT.SOURCE_SYSTEM_ID = 8 AND NHIN_CATEGORY_ID = 122
          WHERE CRP. CONTRACT_RATE_PRICING_TYPE_ID = 16701
          AND CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID BETWEEN 12201 AND 12209
          AND TRANSACTION_STATUS_FILL_DATE >= EFFECTIVE_START_DATE
          AND TRANSACTION_STATUS_FILL_DATE <= EFFECTIVE_END_DATE
          AND DCH.DRUG_COST_TYPE = NT.NHIN_TYPE_ABBREVIATION
          AND TRAN.TRANSACTION_INFO_TX_DECIMAL_QUANTITY * DCH.UNIT_PRICE != '0.00'
          UNION ALL
          SELECT CONTRACT_RATE_ID,TRANSACTION_ID,CHAIN_ID,
          CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID,NHIN_TYPE_ABBREVIATION,ACTUALRX_FEE_SCHEDULE_DETAIL_UNIT_PRICE/100 AS ACTUALRX_FEE_SCHEDULE_DETAIL_UNIT_PRICE,
          ACTUALRX_FEE_SCHEDULE_DETAIL_EFFECTIVE_START_DATE,
          ACTUALRX_FEE_SCHEDULE_ID,ACTUALRX_FEE_SCHEDULE_NAME
          FROM TMP_FEE_SCHEDULE_LIST WHERE TMP_FEE_SCHEDULE_ROWNUM = 1
      ),

      TMP_DETAIL_RS AS
      (
        select
                    --ROW_NUMBER() OVER (PARTITION BY TRANSACTION_ID ORDER BY SOURCE_TIMESTAMP DESC) as ROW_NUM,
                    TMP_TRAN.CHAIN_ID,
                    TMP_TRAN.TRANSACTION_ID,
                    TRANSACTION_STATUS_PLAN_ID AS PLAN_ID,
                    CARRIER_CODE,
                    PLAN_CODE,
                    PLAN_NAME,
                    THIRD_PARTY_CONTRACT_NAME AS CONTRACT_NAME,
                    TRANSACTION_INFO_GROUP_CODE AS GROUP_CODE,
                    TRANSACTION_STATUS_NHIN_STORE_ID AS NHIN_ID,
                    STORE_ID,
                    TRANSACTION_STATUS_SOLD_DATE AS SOLD_DATE,
                    CONTRACT_RATE_STATE_ID AS STATE_CODE,
                    CONTACT_INFO_STATE AS STATE,
                    TRANSACTION_STATUS_TOTAL_PAID_AMOUNT AS TOT_PAID_AMT,
                    TRANSACTION_STATUS_RX_NUMBER AS RX_NUM,
                    TRANSACTION_STATUS_TX_NUMBER AS TX_NUM,
                    TRANSACTION_STATUS_FILL_DATE AS FILL_DATE,
                    CONTRACT_RATE_COST_BASE AS COST_BASE,
                    CONTRACT_RATE_SERVICE_FEE AS SERVICE_FEE,
                    NHIN_TYPE_ABBREVIATION AS BRAND_OR_GENERIC,
                    CONTRACT_RATE_ID,
                    TRANSACTION_INFO_ACQUISITION_COST AS ACQ_COST,
                    TRANSACTION_INFO_DAYS_SUPPLY DAYS_SUPPLY,
                    TRANSACTION_INFO_DRUG_AWP AS DRUG_AWP,
                    CONTRACT_RATE_NETWORK_NAME ,
                    CONTRACT_RATE_START_DAYS_SUPPLY AS START_DAYS_SUPPLY,
                    CONTRACT_RATE_END_DAYS_SUPPLY AS END_DAYS_SUPPLY,
                    CONTRACT_RATE_UNDERPAY_THRESHOLD AS UNDERPAY_THRESHOLD,
                    TRANSACTION_INFO_BIN_NUMBER AS BIN_NUM,
                    TRANSACTION_INFO_PCN_NUMBER AS PCN_NUM,
                    DISPENSED_QUANTITY AS DISPD_QTY,
                    TRANSACTION_INFO_DAW AS DAW,
                    TRANSACTION_INFO_UC_PRICE AS UC_PRICE,
                    TRANSACTION_INFO_DRUG_NAME AS DRUG_NAME,
                    TRANSACTION_INFO_DRUG_NDC AS DRUG_NDC,
                    CASE WHEN DRUG_MULTI_SOURCE = 'Y' THEN 'Generic' ELSE 'Brand' END  AS DRUG_BRAND_GENERIC,
                    CASE WHEN TRANSACTION_INFO_GENERIC_CODE = 'Y' THEN 'Generic' ELSE 'Brand' END  AS STORE_BRAND_GENERIC,
                    TRANSACTION_INFO_COST AS COST,
                    TRANSACTION_STATUS_SPLIT_BILL_OPT_TYPE_ID AS SPLIT_BILL_OPT,
                    SPLIT_BILL_ABBREVIATION,
                    TRANSACTION_INFO_RX_PRICE AS RX_PRICE,
                    TRANSACTION_INFO_COPAY_AMOUNT AS COPAY_AMT,
                    TRANSACTION_INFO_TAX_AMOUNT AS TAX_AMT,
                    TRANSACTION_INFO_TX_DECIMAL_QUANTITY  AS TX_DEC_QTY,
                    TRANSACTION_INFO_NETWORK_REIMBURSEMENT_ID AS NETWORK_REIMB_ID,
                    TRANSACTION_INFO_BASIS_OF_REIMBURSEMENT AS BASIS_OF_REIMB,
                    CONTRACT_RATE_CARRIER_ID,
                    TRANSACTION_TYPE_ABBREVIATION AS TRANSACTION_TYPE,
                    TRANSACTION_STATUS_SUBMIT_AMOUNT AS SUB_AMT,
                    TRANSACTION_NOTE AS NOTE,
                    TRANSACTION_NOTE_CATEGORY_TYPE AS NOTE_CATEGORY,
                    TRANSACTION_NOTE_PROGRESS_STATUS_TYPE AS PROGRESS_STATUS,
                    TRANSACTION_STATUS_PROCESSOR_ID AS PROCESSOR_ID ,
                    TRANSACTION_INFO_TP_REFERENCE_NUMBER AS TP_REF_NUM ,
                    GPI,
                    DRUG_GCN AS GCN,
                    STORE_NCPDP_NUMBER AS NABP_NUM ,
                    STORE_NPI_NUMBER AS STORE_NPI,
                    CASE WHEN {% condition paid_amount_filter %} 'Actual Payments' {% endcondition %} THEN TRANSACTION_STATUS_TOTAL_PAID_AMOUNT
                         WHEN {% condition paid_amount_filter %} 'Adjudicated Amount' {% endcondition %} THEN TRANSACTION_STATUS_SUBMIT_AMOUNT
                    ELSE TRANSACTION_STATUS_TOTAL_PAID_AMOUNT END THIRD_PARTY_PAID_AMOUNT,
                    CASE WHEN TRANSACTION_INFO_DISPENSING_FEE_PAID > '0.00' then TRANSACTION_INFO_DISPENSING_FEE_PAID ELSE
                    ((TRANSACTION_INFO_RX_PRICE) - (TRANSACTION_INFO_COST)) END AS DISPFEEPAID,
                    TRANSACTION_INFO_INGREDIENT_COST_PAID AS INGREDCOSTPAID,
                    CASE WHEN {% condition include_copay_amount_in_tot_amt_paid %} 'YES' {% endcondition %} AND {% condition paid_amount_filter %} 'Actual Payments' {% endcondition %} THEN TRANSACTION_STATUS_TOTAL_PAID_AMOUNT + TRANSACTION_INFO_COPAY_AMOUNT
                         WHEN {% condition include_copay_amount_in_tot_amt_paid %} 'YES' {% endcondition %} AND {% condition paid_amount_filter %} 'Adjudicated Amount' {% endcondition %} THEN TRANSACTION_STATUS_SUBMIT_AMOUNT + TRANSACTION_INFO_COPAY_AMOUNT
                         WHEN {% condition include_copay_amount_in_tot_amt_paid %} 'NO' {% endcondition %} AND {% condition paid_amount_filter %} 'Actual Payments' {% endcondition %} THEN TRANSACTION_STATUS_TOTAL_PAID_AMOUNT
                         WHEN {% condition include_copay_amount_in_tot_amt_paid %} 'NO' {% endcondition %} AND {% condition paid_amount_filter %} 'Adjudicated Amount' {% endcondition %} THEN TRANSACTION_STATUS_SUBMIT_AMOUNT
                         END AS TOTALPAIDAMT
                    FROM TMP_AR_TRANS TMP_TRAN
                    JOIN
                    (SELECT DISTINCT TRANSACTION_ID,CHAIN_ID FROM TMP_PRICE_LIST) PL ON TMP_TRAN.TRANSACTION_ID = PL.TRANSACTION_ID AND TMP_TRAN.CHAIN_ID = PL.CHAIN_ID
                    --WHERE TRANSACTION_ID IN (SELECT TRANSACTION_ID FROM TMP_PRICE_LIST PL where PL.TRANSACTION_ID = TRANSACTION_ID  )
                    --order by row_num;
      )

      SELECT * FROM (
      SELECT TRANSACTION_ID,UNITPRICE,EFFECTIVE_START_DATE, CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID , COSTBASE,
      COST,SPLIT_BILL_OPT_FLAG,TX_DEC_QTY,TAX_AMT,COPAY_AMT,SPLIT_BILL_OPT,UNDERPAY_THRESHOLD,CHAIN_ID,
      CONTRACT_RATE_NETWORK_NAME,TP_REF_NUM,STORE_ID,NABP_NUM,STORE_NPI,PROCESSOR_ID,CARRIER_CODE,
      PLAN_CODE,GROUP_CODE,CARRIER_NAME,BIN_NUM,PCN_NUM,NETWORK_REIMB_ID,RX_NUM,TX_NUM,FILL_DATE,
      DRUG_NAME,DRUG_NDC,GPI,DISPD_QTY,DAYS_SUPPLY, DRUG_BRAND_GENERIC,STORE_BRAND_GENERIC,SPLIT_BILL_ABBREVIATION,CONTRACT_NAME,
      STATE,STATE_CODE,DAW,ACQ_COST,UC_PRICE,BASIS_OF_REIMB,TRANSACTION_TYPE,NOTE,NOTE_CATEGORY,PROGRESS_STATUS,
      NHIN_ID,DAYS_SUPPLY_RANGE,BRAND_OR_GENERIC,EXPECTEDPAYMENT,DISPFEEPAID,DISPFEEEXPECTED,THIRD_PARTY_PAID_AMOUNT,TOTALPAIDAMT,
      BASEAMT,AWP,PAIDATUC,PAIDLESSTHANACQCOST,DIFFERENCE,DISPFEEEXPECTEDPERUNIT,DISPFEEDIFFERENCE_LONG,TOTALPAIDPERUNIT,ACQCOSTPERUNIT,
      CALCULATEDPAYMENT2,CALCULATEDPAYMENT3,
      ROW_NUMBER() OVER (PARTITION BY CHAIN_ID,TRANSACTION_ID ORDER BY EXPECTEDPAYMENT ASC)  PAY_ROW_NUM,
      CASE WHEN SPLIT_BILL_OPT_FLAG = 'NO' AND COST = '0.00' THEN '0.00'
           WHEN SPLIT_BILL_OPT_FLAG = 'NO' AND COST != '0.00' THEN EXPECTEDPAYMENT/NULLIF(TX_DEC_QTY,0) END AS EXPECTEDPAYMENTPERUNIT,
      --ARL-163--
      INGREDCOSTPAID,
      (EXPECTEDPAYMENT - DISPFEEEXPECTED) AS INGREDCOSTEXPECTED,
      (INGREDCOSTPAID - (EXPECTEDPAYMENT - DISPFEEEXPECTED)) AS INGREDCOSTDIFFERENCE,
      CASE WHEN TX_DEC_QTY = '0.00' THEN '0.00' ELSE ((EXPECTEDPAYMENT - DISPFEEEXPECTED)/NULLIF(TX_DEC_QTY,0)) END AS INGREDCOSTEXPECTEDPERUNIT,
      CASE WHEN TX_DEC_QTY = '0.00' THEN '0.00' ELSE (INGREDCOSTPAID/NULLIF(TX_DEC_QTY,0)) END AS INGREDCOSTPAIDPERUNIT,
      CASE WHEN AWP = (INGREDCOSTPAID) OR AWP = '0.00' THEN '0.00'
      ELSE (100 - ((INGREDCOSTPAID)/NULLIF(AWP,0)))  END AS AWPDISCOUNT,
      CASE WHEN SPLIT_BILL_OPT = 196 THEN DISPFEEDIFFERENCE_LONG END AS DISPFEEDIFFERENCE,
      CASE WHEN BASEAMT > '0.00' THEN 1 ELSE 0 END AS TOTAL_COUNT,
      CASE WHEN BASEAMT > '0.00' AND THIRD_PARTY_PAID_AMOUNT = '0.00' THEN 1 ELSE 0 END AS NOT_PAID_COUNT,
      CASE WHEN BASEAMT > '0.00' AND THIRD_PARTY_PAID_AMOUNT != '0.00' AND DIFFERENCE >= (UNDERPAY_THRESHOLD * -1) THEN 1 ELSE 0 END AS WI_CONTRACT_COUNT,
      CASE WHEN BASEAMT > '0.00' AND THIRD_PARTY_PAID_AMOUNT != '0.00' AND DIFFERENCE < (UNDERPAY_THRESHOLD * -1) THEN 1 ELSE 0  END AS EXCEPTION_COUNT,
      CASE WHEN BASEAMT > '0.00' AND THIRD_PARTY_PAID_AMOUNT != '0.00' AND DIFFERENCE < (UNDERPAY_THRESHOLD * -1) THEN DIFFERENCE ELSE '0.00' END AS EXCEPTION_AMOUNT,
      CASE WHEN BASEAMT > '0.00' AND THIRD_PARTY_PAID_AMOUNT != '0.00' AND SPLIT_BILL_OPT = 196 AND DISPFEEDIFFERENCE_LONG < '0.00' THEN 1 ELSE 0 END AS DISP_FEE_EXCEPTION_COUNT,
      CASE WHEN BASEAMT > '0.00' AND THIRD_PARTY_PAID_AMOUNT != '0.00' AND SPLIT_BILL_OPT = 196 AND DISPFEEDIFFERENCE_LONG < '0.00' THEN DISPFEEDIFFERENCE_LONG ELSE '0.00' END AS DISP_FEE_EXCEPTION_AMOUNT,
      CASE WHEN BASEAMT > '0.00' AND THIRD_PARTY_PAID_AMOUNT != '0.00' AND (INGREDCOSTPAID - (EXPECTEDPAYMENT - DISPFEEEXPECTED)) < '0.00' THEN 1 ELSE 0 END AS INGRD_COST_EXCEPTION_COUNT,
      CASE WHEN BASEAMT > '0.00' AND THIRD_PARTY_PAID_AMOUNT != '0.00' AND (INGREDCOSTPAID - (EXPECTEDPAYMENT - DISPFEEEXPECTED)) < '0.00' THEN
        (INGREDCOSTPAID - (EXPECTEDPAYMENT - DISPFEEEXPECTED)) ELSE '0.00' END AS INGRD_COST_EXCEPTION_AMOUNT
      FROM (
      SELECT TRANSACTION_ID,UNITPRICE,EFFECTIVE_START_DATE, CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID , COSTBASE,
      COST,SPLIT_BILL_OPT_FLAG,TX_DEC_QTY,TAX_AMT,COPAY_AMT,SPLIT_BILL_OPT,UNDERPAY_THRESHOLD,CHAIN_ID,
      CONTRACT_RATE_NETWORK_NAME,TP_REF_NUM,STORE_ID,NABP_NUM,STORE_NPI,PROCESSOR_ID,CARRIER_CODE,
      PLAN_CODE,GROUP_CODE,CARRIER_NAME,BIN_NUM,PCN_NUM,NETWORK_REIMB_ID,RX_NUM,TX_NUM,FILL_DATE,
      DRUG_NAME,DRUG_NDC,GPI,DISPD_QTY,DAYS_SUPPLY, DRUG_BRAND_GENERIC,STORE_BRAND_GENERIC,
      STATE,STATE_CODE,DAW,ACQ_COST,UC_PRICE,BASIS_OF_REIMB,TRANSACTION_TYPE,NOTE,NOTE_CATEGORY,PROGRESS_STATUS,
      NHIN_ID,DAYS_SUPPLY_RANGE,BRAND_OR_GENERIC,SPLIT_BILL_ABBREVIATION,CONTRACT_NAME,
      /*CASE WHEN (BASEAMOUNT+DIFFERENTIAL+DISPENSING_FEE) IS NOT NULL THEN (BASEAMOUNT+DIFFERENTIAL+DISPENSING_FEE)
           WHEN CALCULATEDPAYMENT2 IS NOT NULL THEN CALCULATEDPAYMENT2
           WHEN CALCULATEDPAYMENT3 IS NOT NULL THEN CALCULATEDPAYMENT3
      END AS EXPECTEDPAYMENT,*/
      COALESCE((BASEAMOUNT+DIFFERENTIAL+DISPENSING_FEE),CALCULATEDPAYMENT2,CALCULATEDPAYMENT3) EXPECTEDPAYMENT,
      CALCULATEDPAYMENT2,CALCULATEDPAYMENT3,
      CASE WHEN CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID = 12210 AND ACTUALRX_FEE_SCHEDULE_NAME IS NOT NULL THEN ACTUALRX_FEE_SCHEDULE_NAME ELSE '' END AS  COSTBASETEXT,
      CASE WHEN SPLIT_BILL_OPT_FLAG = 'NO' THEN DISPENSING_FEE ELSE NULL END AS DISPFEEEXPECTED,
      CASE WHEN SPLIT_BILL_OPT_FLAG = 'NO' AND COST = '0.00' THEN '0.00'
           WHEN SPLIT_BILL_OPT_FLAG = 'NO' AND COST != '0.00' THEN DISPFEEPAID END AS DISPFEEPAID,
      THIRD_PARTY_PAID_AMOUNT,TOTALPAIDAMT,
      CASE WHEN CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID = 12211 THEN UNITPRICE ELSE UNITPRICE * TX_DEC_QTY * 100  END AS BASEAMT,
      CASE WHEN CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID = 12211 THEN UNITPRICE ELSE UNITPRICE * TX_DEC_QTY END AS AWP,
      CASE WHEN TOTALPAIDAMT = UC_PRICE THEN 'YES' ELSE 'NO' END AS PAIDATUC,
      CASE WHEN TOTALPAIDAMT < ACQ_COST THEN 'YES' ELSE 'NO' END AS PAIDLESSTHANACQCOST,
      TOTALPAIDAMT - (CASE WHEN (BASEAMOUNT+DIFFERENTIAL+DISPENSING_FEE) IS NOT NULL THEN (BASEAMOUNT+DIFFERENTIAL+DISPENSING_FEE)
                           WHEN CALCULATEDPAYMENT2 IS NOT NULL THEN CALCULATEDPAYMENT2
                           WHEN CALCULATEDPAYMENT3 IS NOT NULL THEN CALCULATEDPAYMENT3
                      END) AS DIFFERENCE,
      CASE WHEN SPLIT_BILL_OPT_FLAG = 'NO' THEN DISPENSING_FEE/NULLIF(TX_DEC_QTY,0) ELSE NULL END AS DISPFEEEXPECTEDPERUNIT,
      CASE WHEN SPLIT_BILL_OPT_FLAG = 'NO' AND COST = '0.00' THEN '0.00'
           WHEN SPLIT_BILL_OPT_FLAG = 'NO' AND COST != '0.00' THEN DISPFEEPAID - DISPENSING_FEE END AS DISPFEEDIFFERENCE_LONG,
      CASE WHEN TX_DEC_QTY = '0.00' THEN '0.00' ELSE THIRD_PARTY_PAID_AMOUNT/NULLIF(TX_DEC_QTY,0) END AS TOTALPAIDPERUNIT,
      CASE WHEN TX_DEC_QTY = '0.00' THEN '0.00' ELSE ACQ_COST/NULLIF(TX_DEC_QTY,0) END AS ACQCOSTPERUNIT,
      --ARL-163--INGREDCOSTPAID moved so it can be used above in calculations
      CASE WHEN INGREDCOSTPAID > '0.00' THEN INGREDCOSTPAID ELSE
      ((THIRD_PARTY_PAID_AMOUNT + COPAY_AMT) - (DISPFEEPAID + TAX_AMT)) END AS INGREDCOSTPAID
      FROM (
      SELECT RES.*
      ,CASE WHEN CONTRACT_RATE_PRICING_TYPE_ID = 16701 AND CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID < 12210 THEN (TX_DEC_QTY * UNITPRICE * 100) END AS BASEAMOUNT
      ,CASE WHEN CONTRACT_RATE_PRICING_TYPE_ID = 16701 AND CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID < 12210 AND CONTRACT_RATE_PRICING_PERCENTAGE_ADJUSTMENT_TYPE_ID = 12701  THEN ((TX_DEC_QTY * UNITPRICE * 100) * (CONTRACT_RATE_PRICING_PERCENTAGE_ADJUSTMENT/100) * -1)
            WHEN CONTRACT_RATE_PRICING_TYPE_ID = 16701 AND CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID < 12210 THEN (TX_DEC_QTY * UNITPRICE * 100) * (CONTRACT_RATE_PRICING_PERCENTAGE_ADJUSTMENT/100)
       END AS DIFFERENTIAL,

      CASE WHEN CONTRACT_RATE_PRICING_TYPE_ID = 16702 AND CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID = 12210 THEN (TX_DEC_QTY * UNITPRICE * 100) + DISPENSING_FEE END AS CALCULATEDPAYMENT2,
      CASE WHEN CONTRACT_RATE_PRICING_TYPE_ID = 16703 AND CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID = 12211 THEN UC_PRICE END AS CALCULATEDPAYMENT3
      FROM
      (
      SELECT CRP.CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID,CRP.CONTRACT_RATE_PRICING_MAC_LIST_ID,
      CASE WHEN CRP.CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID = 12211 THEN RS.UC_PRICE
           WHEN CRP.CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID = 12210 AND PL.CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID = 12210 AND ACTUALRX_FEE_SCHEDULE_NAME IS NOT NULL THEN PL.UNIT_PRICE
           WHEN PL.CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID IS NOT NULL THEN PL.UNIT_PRICE
      ELSE NULL END AS UNITPRICE
      ,
      CASE WHEN CRP.CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID = 12211 THEN NULL
           WHEN CRP.CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID = 12210 AND PL.CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID = 12210 AND ACTUALRX_FEE_SCHEDULE_NAME IS NOT NULL THEN PL.EFFECTIVE_START_DATE
           WHEN PL.CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID IS NOT NULL THEN PL.EFFECTIVE_START_DATE
      ELSE NULL END AS EFFECTIVE_START_DATE,
      CRP.CONTRACT_RATE_PRICING_TYPE_ID,
      RS.TX_DEC_QTY,
      CRP.CONTRACT_RATE_PRICING_PERCENTAGE_ADJUSTMENT,
      CRP.CONTRACT_RATE_PRICING_PERCENTAGE_ADJUSTMENT_TYPE_ID,
      CRP.CONTRACT_RATE_PRICING_DISPENSING_FEE/100 AS DISPENSING_FEE,
      RS.UC_PRICE,
      PL.ACTUALRX_FEE_SCHEDULE_NAME,
      RS.DISPFEEPAID,
      RS.THIRD_PARTY_PAID_AMOUNT,
      RS.TOTALPAIDAMT,
      RS.ACQ_COST,
      RS.COST,
      RS.COPAY_AMT,
      RS.TAX_AMT,
      RS.SPLIT_BILL_OPT,
      RS.UNDERPAY_THRESHOLD,
      RS.CHAIN_ID,
      RS.CONTRACT_RATE_NETWORK_NAME,
      RS.TP_REF_NUM,
      RS.STORE_ID,
      RS.NABP_NUM,
      RS.STORE_NPI,
      RS.PROCESSOR_ID,
      RS.CARRIER_CODE,
      RS.PLAN_CODE,
      RS.GROUP_CODE,
      RS.PLAN_NAME AS CARRIER_NAME,
      RS.BIN_NUM,
      RS.PCN_NUM,
      RS.NETWORK_REIMB_ID,
      RS.RX_NUM,
      RS.TX_NUM,
      RS.FILL_DATE,
      RS.DRUG_NAME,
      RS.DRUG_NDC,
      RS.GPI,
      RS.DISPD_QTY,
      RS.DAYS_SUPPLY,
      RS.DRUG_BRAND_GENERIC,
      RS.STORE_BRAND_GENERIC,
      RS.STATE,
      RS.STATE_CODE,
      RS.DAW,
      RS.BASIS_OF_REIMB,
      RS.TRANSACTION_TYPE,
      RS.NOTE,
      RS.NOTE_CATEGORY,
      RS.PROGRESS_STATUS,
      RS.NHIN_ID,
      RS.TRANSACTION_ID,
      RS.START_DAYS_SUPPLY || ' to ' || RS.END_DAYS_SUPPLY AS DAYS_SUPPLY_RANGE,
      RS.BRAND_OR_GENERIC,
      RS.SPLIT_BILL_ABBREVIATION,
      RS.CONTRACT_NAME,
      CASE WHEN NT.NHIN_TYPE_ABBREVIATION = 'FEE SCHED' AND ACTUALRX_FEE_SCHEDULE_NAME IS NOT NULL THEN NT.NHIN_TYPE_ABBREVIATION || ' : ' || ACTUALRX_FEE_SCHEDULE_NAME ELSE NT.NHIN_TYPE_ABBREVIATION END  AS COSTBASE,
      CASE WHEN RS.SPLIT_BILL_OPT != 196 AND RS.SPLIT_BILL_OPT != 197 THEN 'YES' ELSE 'NO' END AS SPLIT_BILL_OPT_FLAG,
      INGREDCOSTPAID
      FROM
      TMP_DETAIL_RS RS
      JOIN TMP_PRICE_LIST PL ON RS.TRANSACTION_ID = PL.TRANSACTION_ID AND RS.CHAIN_ID = PL.CHAIN_ID
      LEFT JOIN EDW.D_CONTRACT_RATE_PRICING CRP ON CRP.CONTRACT_RATE_ID = RS.CONTRACT_RATE_ID AND CRP.CHAIN_ID = RS.CHAIN_ID
      AND PL.CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID = CRP.CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID
      LEFT JOIN NHIN_TYPE NT
      ON CRP.CONTRACT_RATE_PRICING_COST_BASE_TYPE_ID = NT.NHIN_TYPE_ID AND NT.SOURCE_SYSTEM_ID = 8 AND NHIN_CATEGORY_ID = 122
      ) RES
      )LOWESTCOSTBASE WHERE(((BASEAMOUNT+DIFFERENTIAL+DISPENSING_FEE) IS NOT NULL AND (BASEAMOUNT+DIFFERENTIAL+DISPENSING_FEE) != '0.0' ) OR (CALCULATEDPAYMENT2 IS NOT NULL AND CALCULATEDPAYMENT2 != '0.0' )
      OR ( CALCULATEDPAYMENT3 IS NOT NULL AND CALCULATEDPAYMENT3 != '0.0' ) )
      ) NAR_DETAIL
      )NAR_RPT
      WHERE PAY_ROW_NUM = 1 AND
      (
                    (
                      ({% condition detail_level_filter %} 'Summary' {% endcondition %}
                       OR
                       {% condition detail_level_filter %} 'Detail- All' {% endcondition %}
                      )
                      and (TOTAL_COUNT = 1 )
                    )
                    OR
                    (
                      {% condition detail_level_filter %} 'Detail- Exceptions' {% endcondition %}
                      and ( EXCEPTION_COUNT = 1 )
                    )
                    OR
                    (
                      {% condition detail_level_filter %} 'Detail- Not Paid' {% endcondition %}
                      and ( NOT_PAID_COUNT = 1 )
                    )
                    OR
                    (
                      {% condition detail_level_filter %} 'Detail- Compliant Only' {% endcondition %}
                      and ( WI_CONTRACT_COUNT = 1 )
                    )
        )
     ;;
  }



  dimension: chain_id {
    #hidden: yes
    type: number
    # primary key in source
    sql: ${TABLE}.CHAIN_ID ;;
  }

  dimension: nhin_id {
    type: number
    sql: ${TABLE}.NHIN_ID ;;
  }

  dimension: rx_number {
    type: number
    label: "Rx Num"
    description: "Prescription number"
    sql: ${TABLE}.RX_NUM ;;
    value_format: "####"
  }

  dimension: tx_number {
    type: number
    label: "Tx Num"
    description: "Transaction number"
    sql: ${TABLE}.TX_NUM ;;
    value_format: "####"
  }

  dimension: transaction_id {
    type: number
    label: "Claim ID"
    sql: ${TABLE}.TRANSACTION_ID ;;
    value_format: "####"
  }

  dimension: tp_ref_num {
    type: string
    label: "TP Ref Number"
    sql: ${TABLE}.TP_REF_NUM ;;
    #value_format: "####"
  }

  dimension: store_id {
    type: string
    label: "Store ID"
    sql: ${TABLE}.STORE_ID ;;
  }

  dimension: nabp_num {
    type: number
    label: "NCPDP"
    sql: ${TABLE}.NABP_NUM ;;
    value_format: "####"
  }

  dimension: store_npi {
    type: number
    label: "NPI"
    sql: ${TABLE}.STORE_NPI ;;
    value_format: "####"
  }

  dimension: processor_id {
    type: string
    label: "Payer"
    sql: ${TABLE}.PROCESSOR_ID ;;
    }

  dimension: carrier_code {
    type: string
    label: "Carrier Code"
    sql: ${TABLE}.CARRIER_CODE ;;
  }

  dimension: carrier_name {
    type: string
    label: "Carrier Name"
    sql: ${TABLE}.CARRIER_NAME ;;
  }

  dimension: plan_code {
    type: string
    label: "Plan Code"
    sql: ${TABLE}.PLAN_CODE ;;
  }

  dimension: group_code {
    type: string
    label: "Group Code"
    sql: ${TABLE}.GROUP_CODE ;;
  }

  dimension: bin_number {
    type: string
    label: "BIN"
    sql: ${TABLE}.BIN_NUM ;;
  }

  dimension: pcn_number {
    type: string
    label: "PCN"
    sql: ${TABLE}.PCN_NUM ;;
  }

  dimension: drug_name {
    type: string
    label: "Drug Name"
    sql: ${TABLE}.DRUG_NAME ;;
  }

  dimension: drug_ndc {
    type: string
    label: "NDC"
    sql: ${TABLE}.DRUG_NDC ;;
  }

  dimension: gpi {
    type: string
    label: "Drug GPI"
    sql: ${TABLE}.GPI ;;
  }

  dimension: network_reimb_id {
    type: string
    label: "Network ID"
    sql: ${TABLE}.NETWORK_REIMB_ID ;;
  }

  dimension: days_supply {
    label: "Days Supply"
    type: number
    sql: ${TABLE}.DAYS_SUPPLY ;;
  }

  dimension: split_bill_opt {
    label: "Split Bill"
    type: string
    sql: ${TABLE}.SPLIT_BILL_ABBREVIATION ;;
  }

  dimension: drug_brand_generic {
    label: "Brand/Generic"
    type: string
    sql: ${TABLE}.DRUG_BRAND_GENERIC ;;
  }

  dimension: store_brand_generic {
    label: "Store Brand/Generic"
    type: string
    sql: ${TABLE}.STORE_BRAND_GENERIC ;;
  }

  dimension: contract_state {
    type: string
    label: "Contract State"
    sql: ${TABLE}.STATE_CODE ;;
  }

  dimension: state {
    type: string
    label: "State"
    sql: ${TABLE}.STATE_CODE ;;
  }

  dimension: store_state {
    type: string
    label: "Store State"
    sql: ${TABLE}.STATE ;;
  }

  dimension: daw {
    type: string
    label: "DAW"
    sql: ${TABLE}.DAW ;;
  }

  dimension: brand_or_generic {
    type: string
    label: "Brand or Generic"
    sql: ${TABLE}.BRAND_OR_GENERIC ;;
  }

  dimension: days_supply_range {
    type: string
    label: "Days Supply Range"
    sql: ${TABLE}.DAYS_SUPPLY_RANGE ;;
  }

  dimension: contract_rate_network_name {
    type: string
    label: "Rate/Network Name"
    sql: ${TABLE}.CONTRACT_RATE_NETWORK_NAME ;;
  }

  dimension: contract_name {
    type: string
    label: "Contract Name"
    sql: ${TABLE}.CONTRACT_NAME ;;
  }

  dimension: costbase {
    type: string
    label: "Cost Base"
    sql: ${TABLE}.COSTBASE ;;
  }

  dimension: transaction_type {
    type: string
    label: "Claim Type"
    sql: ${TABLE}.transaction_type ;;
  }

  dimension: note {
    type: string
    label: "Note"
    sql: ${TABLE}.NOTE ;;
  }

  dimension: note_category {
    type: string
    label: "Note Category"
    sql: ${TABLE}.NOTE_CATEGORY ;;
  }

  dimension: progress_status {
    type: string
    label: "Note Status"
    sql: ${TABLE}.PROGRESS_STATUS ;;
  }

  dimension: paidAtUC {
    label: "Paid at U&C"
    type: string
    sql: ${TABLE}.PAIDATUC ;;

  }


  dimension: paid_less_than_acq_cost {
    label: "Paid < Acq Cost"
    type: string
    sql: ${TABLE}.PAIDLESSTHANACQCOST ;;

  }
  dimension_group: filled {
    label: "Fill"
    description: "Date prescription was filled"
    type: time
    timeframes: [
      time,
      date,
      week,
      month,
      month_num,
      year,
      quarter,
      quarter_of_year,
      yesno,
      hour_of_day,
      time_of_day,
      hour2,
      minute15,
      day_of_week,
      week_of_year,
      day_of_week_index,
      day_of_month
    ]
    sql: ${TABLE}.FILL_DATE ;;
  }


  dimension_group: effective_start_date {
    label: "Cost Base"
    description: "Cost Base Date"
    type: time
    timeframes: [
      time,
      date,
      week,
      month,
      month_num,
      year,
      quarter,
      quarter_of_year,
      yesno,
      hour_of_day,
      time_of_day,
      hour2,
      minute15,
      day_of_week,
      week_of_year,
      day_of_week_index,
      day_of_month
    ]
    sql: ${TABLE}.EFFECTIVE_START_DATE ;;
  }

  measure: dispd_qty {
    label: "Quantity"
    type: sum
    sql: ${TABLE}.DISPD_QTY ;;
    value_format: "#,##0.00"
  }

  measure: basis_of_reimb {
    type: string
    label: "Basis of Reimbursement Code"
    # defined as a measure with MAX to be able to place the field between other measure fields (as-is in CPR V2 report
    sql: MAX(${TABLE}.BASIS_OF_REIMB) ;;
  }

  measure: acq_cost {
    label: "Acq Cost"
    type: sum
    sql: ${TABLE}.ACQ_COST ;;
    value_format: "$#,##0.00"
  }

  measure: uc_price {
    label: "U&C Price"
    type: sum
    sql: ${TABLE}.UC_PRICE ;;
    value_format: "$#,##0.00"
  }

  measure: baseAmt {
    label: "Cost Base Amount"
    type: sum
    sql: ${TABLE}.BASEAMT ;;
    value_format: "$#,##0.00"
  }

  measure: ingredCostExpected {
    label: "Ing Cost Contracted"
    type: sum
    sql: ${TABLE}.INGREDCOSTEXPECTED ;;
    value_format: "$#,##0.00"
  }

  measure: ingredCostadjudicated {
    label: "Ing Cost Adjudicated"
    type: sum
    sql: ${TABLE}.INGREDCOSTPAID ;;
    value_format: "$#,##0.00"
  }

  measure: ingredCostPaid {
    label: "Ing Cost Paid"
    type: sum
    sql: ${TABLE}.INGREDCOSTPAID ;;
    value_format: "$#,##0.00"
  }

  measure: ingredCostDifference {
    label: "Ing Cost Diff"
    type: sum
    sql: ${TABLE}.INGREDCOSTDIFFERENCE ;;
    value_format: "$#,##0.00"
  }

  measure: dispFeeExpected {
    label: "Disp Fee Contracted"
    type: sum
    sql: ${TABLE}.DISPFEEEXPECTED ;;
    value_format: "#,##0.00"
  }

  measure: dispFeePaid {
    label: "Disp Fee Paid"
    type: sum
    sql: ${TABLE}.DISPFEEPAID ;;
    value_format: "#,##0.00"
  }

  measure: dispFeeadjudicated {
    label: "Disp Fee Adjudicated"
    type: sum
    sql: ${TABLE}.DISPFEEPAID ;;
    value_format: "#,##0.00"
  }

  measure: dispFeeDifference {
    label: "Disp Fee Diff"
    type: sum
    sql: ${TABLE}.DISPFEEDIFFERENCE ;;
    value_format: "#,##0.00"
  }

  measure: tax_amt {
    label: "Tax"
    type: sum
    sql: ${TABLE}.TAX_AMT ;;
    value_format: "$#,##0.00"
  }

  measure: thirdPartyPaidAmt {
    label: "Third Party Paid"
    type: sum
    sql: ${TABLE}.THIRD_PARTY_PAID_AMOUNT ;;
    value_format: "$#,##0.00"
  }


  measure: thirdPartyadjudicatedAmt {
    label: "Third Party Adjudicated"
    type: sum
    sql: ${TABLE}.THIRD_PARTY_PAID_AMOUNT ;;
    value_format: "$#,##0.00"
  }
  measure: copay_amt {
    label: "Copay"
    type: sum
    sql: ${TABLE}.COPAY_AMT ;;
    value_format: "$#,##0.00"
  }

  measure: expectedPayment {
    label: "Total Contracted Payment"
    type: sum
    sql: ${TABLE}.EXPECTEDPAYMENT ;;
    value_format: "$#,##0.00"
  }

  measure: CALCULATEDPAYMENT2 {
    label: "CALCULATEDPAYMENT2"
    type: sum
    sql: ${TABLE}.CALCULATEDPAYMENT2 ;;
    value_format: "$#,##0.00"
  }

  measure: CALCULATEDPAYMENT3 {
    label: "CALCULATEDPAYMENT3"
    type: sum
    sql: ${TABLE}.CALCULATEDPAYMENT3 ;;
    value_format: "$#,##0.00"
  }



  measure: totaladjudicatedAmt {
    label: "Total Adjudicated"
    type: sum
    sql: ${TABLE}.TOTALPAIDAMT ;;
    value_format: "$#,##0.00"
  }

  measure: totalPaidAmt {
    label: "Total Paid"
    type: sum
    sql: ${TABLE}.TOTALPAIDAMT ;;
    value_format: "$#,##0.00"
  }

  measure: difference {
    label: "Total $ Difference"
    type: sum
    sql: ${TABLE}.DIFFERENCE ;;
    value_format: "$#,##0.00"
  }

  measure: adjudicated_awp_discount {
    label: "Adjudicated Rate"
    type: sum
    sql: ${TABLE}.AWPDISCOUNT ;;
    value_format: "$#,##0.00"
  }

  measure: awp_discount {
    label: "Actual Rate"
    type: sum
    sql: ${TABLE}.AWPDISCOUNT ;;
    value_format: "$#,##0.00"
  }


  measure: acqCostPerUnit {
    label: "Acq Cost Per Unit"
    type: sum
    sql: ${TABLE}.ACQCOSTPERUNIT ;;
    value_format: "$#,##0.0000"
  }

  measure: ingredCostExpectedPerUnit {
    label: "Ing Cost Contracted Per Unit"
    type: sum
    sql: ${TABLE}.INGREDCOSTEXPECTEDPERUNIT ;;
    value_format: "$#,##0.0000"
  }

  measure: ingredCostadjudicatedPerUnit {
    label: "Ing Cost Adjudicated Per Unit"
    type: sum
    sql: ${TABLE}.INGREDCOSTPAIDPERUNIT ;;
    value_format: "$#,##0.0000"
  }

  measure: ingredCostPaidPerUnit {
    label: "Ing Cost Paid Per Unit"
    type: sum
    sql: ${TABLE}.INGREDCOSTPAIDPERUNIT ;;
    value_format: "$#,##0.0000"
  }

  measure: expectedPaymentPerUnit {
    label: "Total Contracted Payment Per Unit"
    type: sum
    sql: ${TABLE}.EXPECTEDPAYMENTPERUNIT ;;
    value_format: "$#,##0.0000"
  }

  measure: totaladjudicatedPerUnit {
    label: "Total Adjudicated Per Unit"
    type: sum
    sql: ${TABLE}.TOTALPAIDPERUNIT ;;
    value_format: "$#,##0.0000"
  }

  measure: totalPaidPerUnit {
    label: "Total paid Per Unit"
    type: sum
    sql: ${TABLE}.TOTALPAIDPERUNIT ;;
    value_format: "$#,##0.0000"
  }


  measure: wi_contract_count {
    label: "Compliance Count"
    type: sum
    sql: ${TABLE}.WI_CONTRACT_COUNT ;;
    value_format: "#,##0"
    }

  measure: exception_count {
    label: "Exceptions Count"
    type: sum
    sql: ${TABLE}.EXCEPTION_COUNT ;;
    value_format: "#,##0"
  }

  measure: not_paid_count {
    label: "Count NOT paid at all"
    type: sum
    sql: ${TABLE}.NOT_PAID_COUNT ;;
    value_format: "#,##0"
  }

  measure: disp_fee_exception_count {
    label: "Dispensing Fee Exception Count"
    type: sum
    sql: ${TABLE}.DISP_FEE_EXCEPTION_COUNT ;;
    value_format: "#,##0"
  }

  measure: ingrd_cost_exception_count {
    label: "Ingredient Cost Exception Count"
    type: sum
    sql: ${TABLE}.INGRD_COST_EXCEPTION_COUNT ;;
    value_format: "#,##0"
  }

  measure: total_count {
    label: "Total # claims"
    type: sum
    sql: ${TABLE}.TOTAL_COUNT ;;
    value_format: "#,##0"
  }

  measure: wi_contract_pct {
    label: "Compliance %"
    type: number
    sql: ${wi_contract_count}/NULLIF(${total_count},0) ;;
    value_format: "00.00%"
  }

  measure: exceptions_pct {
    label: "Exceptions %"
    type: number
    sql: ${exception_count}/NULLIF(${total_count},0) ;;
    value_format: "00.00%"
  }

  measure: not_paid_at_all_pct {
    label: "% NOT paid at all %"
    type: number
    sql: ${not_paid_count}/NULLIF(${total_count},0) ;;
    value_format: "00.00%"
  }

  measure: exceptions_amount {
    label: "Exceptions Amount"
    type: sum
    sql: ${TABLE}.EXCEPTION_AMOUNT ;;
    value_format: "$#,##0.00;($#,##0.00)"
  }

  measure: dispensing_fee_exceptions_amount {
    label: "Dispensing Fee Exception Amount"
    type: sum
    sql: ${TABLE}.DISP_FEE_EXCEPTION_AMOUNT ;;
    value_format: "$#,##0.00;($#,##0.00)"
  }

  measure: ingredient_cost_exceptions_amount {
    label: "Ingredient Cost Exception Amount"
    type: sum
    sql: ${TABLE}.INGRD_COST_EXCEPTION_AMOUNT ;;
    value_format: "$#,##0.00;($#,##0.00)"
  }


  filter: store_filter {
    label: "Store \"Filter Only\""
    type: string
    full_suggestions: yes
  }

  filter: master_contract_filter {
    label: "Master Contract \"Filter Only\""
    type: string
    full_suggestions: yes
  }

  filter: rate_network_name_filter {
    label: "Rate/Network Name \"Filter Only\""
    type: string
    full_suggestions: yes
  }

  filter: carrier_filter {
    label: "Carrier \"Filter Only\""
    type: string
    full_suggestions: yes
  }

  filter: plan_filter {
    label: "Plan \"Filter Only\""
    type: string
    full_suggestions: yes
  }

  filter: group_filter {
    label: "Group \"Filter Only\""
    type: string
    full_suggestions: yes
  }

  filter: fill_date_filter {
    label: "Fill Date \"Filter Only\""
    type: date
  }

  filter: paid_amount_filter {
    label: "Paid Amount \"Filter Only\""
    type: string
    suggestions: ["Actual Payments", "Adjudicated Amount"]
    full_suggestions: yes
  }

  filter: include_split_bill_filter {
    label: "Include Split Bills \"Filter Only\""
    type: string
    suggestions: ["NO", "YES"]
  }

  filter: exclude_zero_dollar_claim_filter {
    label: "Exclude $0 Claims \"Filter Only\""
    type: string
    suggestions: ["NO", "YES"]
  }

  filter: include_copay_amount_in_tot_amt_paid {
    label: "Include Copay In Total Paid \"Filter Only\""
    type: string
    suggestions: ["NO", "YES"]
  }

  filter: detail_level_filter {
    label: "Detail Level \"Filter Only\""
    type: string
    suggestions: ["Summary", "Detail- All", "Detail- Exceptions", "Detail- Not Paid", "Detail- Compliant Only"]
  }

}
